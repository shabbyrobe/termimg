//+build ignore

// Generates some lookup tables used by the text image renderer.

package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"os"

	"github.com/shabbyrobe/imgx/rgba"
	"github.com/shabbyrobe/imgx/termpalette"
)

func main() {
	if err := run(); err != nil {
		log.Fatal(err)
	}
}

func run() error {
	idxr := rgba.NewRGBPrecacheIndexer(nil)

	idx256 := idxr.IndexRGBAPalette(rgba.ConvertPalette(termpalette.Palette))
	bts256 := idx256.(rgba.IndexMarshaler).MarshalIndex()

	idx16 := idxr.IndexRGBAPalette(rgba.ConvertPalette(termpalette.Palette16))
	bts16 := idx16.(rgba.IndexMarshaler).MarshalIndex()

	var buf bytes.Buffer
	buf.WriteString("// Code generated by termimg/gentables.go. DO NOT EDIT.\n\n")
	buf.WriteString("package termimg\n\n")

	buf.WriteString("var (\n")

	buf.WriteString("\t// Prebuilt binary-encoded 256-color termpalette used by rgba.RGBPrecacheIndexer.UnmarshalIndex()\n")
	buf.WriteString("\tindex256Data = ")
	writeByteArray(bts256, &buf, "\t")
	buf.WriteString("\n")

	buf.WriteString("\t// Prebuilt binary-encoded 16-color termpalette used by rgba.RGBPrecacheIndexer.UnmarshalIndex()\n")
	buf.WriteString("\tindex16Data = ")
	writeByteArray(bts16, &buf, "\t")

	buf.WriteString(")\n")

	out := "tables_gen.go"
	orig, err := ioutil.ReadFile(out)
	if err != nil && !os.IsNotExist(err) {
		return err
	}

	if bytes.Compare(orig, buf.Bytes()) != 0 {
		return ioutil.WriteFile(out, buf.Bytes(), 0644)
	}

	return nil
}

func writeByteArray(bts []byte, into *bytes.Buffer, indent string) {
	into.WriteString("[]byte{")

	for i, b := range bts {
		if i%16 == 0 {
			into.WriteString("\n\t" + indent)
		}
		into.WriteString(fmt.Sprintf("0x%02x, ", b))
	}

	into.WriteString("\n" + indent + "}\n")
}
